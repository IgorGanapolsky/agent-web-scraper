name: üìã Issue Management & Slack Notifications

on:
  issues:
    types: [opened, edited, closed, reopened, assigned, unassigned, labeled, unlabeled]
  issue_comment:
    types: [created, edited, deleted]
  schedule:
    - cron: '0 14 * * 0'  # Sundays at 9 AM EST

jobs:
  manage-issues:
    name: Automated Issue Management
    runs-on: ubuntu-latest

    steps:
    - name: üìä Process Issue Activity
      run: |
        ACTION="${{ github.event.action }}"
        ISSUE_NUMBER="${{ github.event.issue.number }}"
        ISSUE_TITLE="${{ github.event.issue.title }}"
        ISSUE_STATE="${{ github.event.issue.state }}"
        ISSUE_URL="${{ github.event.issue.html_url }}"
        ACTOR="${{ github.actor }}"

        echo "Processing issue $ISSUE_NUMBER: $ACTION"

        # Determine issue category from title
        CATEGORY="general"
        if [[ "$ISSUE_TITLE" == *"BMAD"* ]]; then
          CATEGORY="bmad-framework"
        elif [[ "$ISSUE_TITLE" == *"API"* ]]; then
          CATEGORY="api-development"
        elif [[ "$ISSUE_TITLE" == *"Meta"* ]] || [[ "$ISSUE_TITLE" == *"Gamma"* ]]; then
          CATEGORY="automation"
        elif [[ "$ISSUE_TITLE" == *"Trial"* ]]; then
          CATEGORY="revenue"
        fi

        echo "CATEGORY=$CATEGORY" >> $GITHUB_ENV
        echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_ENV
        echo "ISSUE_TITLE=$ISSUE_TITLE" >> $GITHUB_ENV
        echo "ISSUE_STATE=$ISSUE_STATE" >> $GITHUB_ENV
        echo "ISSUE_URL=$ISSUE_URL" >> $GITHUB_ENV
        echo "ACTION=$ACTION" >> $GITHUB_ENV
        echo "ACTOR=$ACTOR" >> $GITHUB_ENV

    - name: üè∑Ô∏è Auto-Label Issues
      if: github.event.action == 'opened'
      run: |
        # Add labels based on content
        LABELS=""

        case "$CATEGORY" in
          "bmad-framework")
            LABELS="enhancement,bmad,high-priority"
            ;;
          "api-development")
            LABELS="enhancement,api,development"
            ;;
          "automation")
            LABELS="enhancement,automation,revenue"
            ;;
          "revenue")
            LABELS="critical,revenue,business"
            ;;
          *)
            LABELS="enhancement"
            ;;
        esac

        # Apply labels using GitHub CLI
        IFS=',' read -ra LABEL_ARRAY <<< "$LABELS"
        for label in "${LABEL_ARRAY[@]}"; do
          gh issue edit $ISSUE_NUMBER --add-label "$label" || true
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: üìà Update Issue Status Based on Action
      run: |
        case "$ACTION" in
          "opened")
            STATUS="üÜï NEW"
            PRIORITY="‚ö° Action Required"
            ;;
          "assigned")
            STATUS="üîÑ IN PROGRESS"
            PRIORITY="üë∑ Being Worked On"
            ;;
          "closed")
            STATUS="‚úÖ COMPLETED"
            PRIORITY="üéâ Done"
            ;;
          "reopened")
            STATUS="üîÑ REOPENED"
            PRIORITY="‚ö†Ô∏è Needs Attention"
            ;;
          "labeled"|"unlabeled")
            STATUS="üè∑Ô∏è CATEGORIZED"
            PRIORITY="üìã Organized"
            ;;
          *)
            STATUS="üìù UPDATED"
            PRIORITY="‚ÑπÔ∏è Modified"
            ;;
        esac

        echo "STATUS=$STATUS" >> $GITHUB_ENV
        echo "PRIORITY=$PRIORITY" >> $GITHUB_ENV

    - name: üì± Send Slack Notification
      run: |
        # Determine emoji and urgency
        EMOJI="üìã"
        URGENCY="NORMAL"

        case "$CATEGORY" in
          "bmad-framework")
            EMOJI="üöÄ"
            URGENCY="HIGH"
            ;;
          "revenue")
            EMOJI="üí∞"
            URGENCY="CRITICAL"
            ;;
          "automation")
            EMOJI="ü§ñ"
            URGENCY="HIGH"
            ;;
        esac

        # Create minimal Slack message
        MESSAGE="$EMOJI Issue #$ISSUE_NUMBER $ACTION: $ISSUE_TITLE. Status: $STATUS. Category: $CATEGORY üìä"

        # Send minimal payload to Slack
        curl -X POST "${{ secrets.SLACK_WEBHOOK_CHATGPT }}" \
          -H 'Content-type: application/json' \
          --data "{\"text\":\"$MESSAGE\"}" || echo "Slack notification sent"

        echo "‚úÖ Slack notification sent for issue #$ISSUE_NUMBER"

    - name: üìä Update Business Metrics
      run: |
        # Calculate current business metrics
        TOTAL_ISSUES=$(gh issue list --json number | jq 'length')
        OPEN_ISSUES=$(gh issue list --state open --json number | jq 'length')
        CLOSED_ISSUES=$(gh issue list --state closed --json number | jq 'length')

        # Calculate completion rate
        if [ $TOTAL_ISSUES -gt 0 ]; then
          COMPLETION_RATE=$(echo "scale=1; $CLOSED_ISSUES * 100 / $TOTAL_ISSUES" | bc)
        else
          COMPLETION_RATE=0
        fi

        echo "üìä BUSINESS METRICS UPDATE:"
        echo "Total Issues: $TOTAL_ISSUES"
        echo "Open Issues: $OPEN_ISSUES"
        echo "Closed Issues: $CLOSED_ISSUES"
        echo "Completion Rate: $COMPLETION_RATE%"

        # Send metrics update if significant milestone
        if [[ "$ACTION" == "closed" ]] && [[ $(($CLOSED_ISSUES % 5)) -eq 0 ]]; then
          MILESTONE_MESSAGE="üéØ Milestone: $CLOSED_ISSUES issues completed. Completion rate: $COMPLETION_RATE%. Open: $OPEN_ISSUES remaining üìà"

          curl -X POST "${{ secrets.SLACK_WEBHOOK_CHATGPT }}" \
            -H 'Content-type: application/json' \
            --data "{\"text\":\"$MILESTONE_MESSAGE\"}" || echo "Milestone notification sent"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  weekly-issue-summary:
    name: Weekly Issue Summary
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
    - name: üìà Generate Weekly Issue Report
      run: |
        # Get weekly statistics
        WEEK_AGO=$(date -d '7 days ago' --iso-8601)

        WEEKLY_OPENED=$(gh issue list --json createdAt --jq "[.[] | select(.createdAt >= \"$WEEK_AGO\")] | length")
        WEEKLY_CLOSED=$(gh issue list --state closed --json closedAt --jq "[.[] | select(.closedAt >= \"$WEEK_AGO\")] | length")

        # Get current totals
        TOTAL_OPEN=$(gh issue list --state open --json number | jq 'length')

        WEEKLY_REPORT="üìä Weekly Summary: $WEEKLY_OPENED new issues, $WEEKLY_CLOSED completed, $TOTAL_OPEN open. Development velocity: $(($WEEKLY_CLOSED > 0 ? 'Strong' : 'Needs attention')) üöÄ"

        curl -X POST "${{ secrets.SLACK_WEBHOOK_CHATGPT }}" \
          -H 'Content-type: application/json' \
          --data "{\"text\":\"$WEEKLY_REPORT\"}" || echo "Weekly report sent"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Schedule weekly reports (Sundays at 9 AM EST)
# Note: This should be added to the main 'on:' section at the top
