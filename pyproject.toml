[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "agent-web-scraper"
dynamic = ["version"]
description = "AI-powered market research agent for automated web scraping and analysis"
readme = "README.md"
license = "MIT"
requires-python = ">=3.10"
authors = [
    {name = "Igor Ganapolsky", email = "your.email@example.com"},
]
keywords = ["web-scraping", "ai", "market-research", "automation", "saas"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # Web scraping and HTTP
    "requests>=2.32.3",
    "beautifulsoup4>=4.13.4",
    "playwright>=1.48.0",
    "undetected-chromedriver>=3.5.5",

    # Data processing
    "pandas>=2.2.3",
    "numpy>=2.0.0",

    # PDF generation
    "reportlab>=4.0.0",
    "matplotlib>=3.8.0",

    # AI and API integrations
    "openai>=1.54.0",
    "google-generativeai>=0.3.0",
    "google-cloud-aiplatform>=1.38.0",
    "serpapi>=0.1.5",
    "praw>=7.7.0",

    # Agentic RAG and Vector Search
    "llama-index>=0.10.0",
    "llama-index-embeddings-openai>=0.1.0",
    "llama-index-vector-stores-chroma>=0.1.0",
    "llama-index-agent-openai>=0.1.0",
    "chromadb>=0.4.0",
    "sentence-transformers>=2.2.0",

    # Google Sheets integration
    "gspread>=6.1.0",
    "google-auth>=2.35.0",
    "google-auth-oauthlib>=1.2.1",
    "oauth2client>=4.1.3",

    # Web framework (removed Streamlit, keeping FastAPI for future web API)
    "fastapi>=0.115.0",
    "uvicorn>=0.32.0",

    # Configuration and environment
    "python-dotenv>=1.1.0",
    "pydantic>=2.9.0",
    "pydantic-settings>=2.6.0",

    # Monitoring and observability
    "sentry-sdk[fastapi,logging]>=2.17.0",
    "structlog>=24.4.0",

    # Async support
    "aiohttp>=3.10.0",
    "asyncio-throttle>=1.0.2",

    # Payment processing
    "stripe>=7.0.0",
    "redis>=5.0.0",
    "passlib[bcrypt]>=1.7.4",

    # Utilities
    "rich>=13.9.0",
    "typer>=0.12.0",
    "reportlab>=4.4.0",
    "pillow>=11.2.1",
    "graphviz>=0.20.3",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.3.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.14.0",
    "httpx>=0.28.0",

    # Code quality
    "ruff>=0.7.0",
    "black>=24.10.0",
    "isort>=5.13.0",
    "mypy>=1.13.0",

    # Pre-commit and hooks
    "pre-commit>=4.0.0",

    # Documentation
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",

    # Type stubs
    "types-requests>=2.32.0",
    "types-beautifulsoup4>=4.12.0",
]

docker = [
    "gunicorn>=23.0.0",
]

[project.urls]
Homepage = "https://github.com/IgorGanapolsky/agent-web-scraper"
Documentation = "https://github.com/IgorGanapolsky/agent-web-scraper#readme"
Repository = "https://github.com/IgorGanapolsky/agent-web-scraper"
Issues = "https://github.com/IgorGanapolsky/agent-web-scraper/issues"

[project.scripts]
agent-scraper = "app.cli.main:app"
scrape-reddit = "app.cli.reddit:main"

[tool.hatch.version]
path = "app/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.hatch.envs.default]
dependencies = [
    "pytest",
    "pytest-cov",
    "pytest-asyncio",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=app --cov-report=term-missing --cov-report=html {args:tests}"
cov-report = "python -m webbrowser htmlcov/index.html"

[tool.hatch.envs.lint]
detached = true
dependencies = [
    "ruff>=0.7.0",
    "black>=24.10.0",
    "mypy>=1.13.0",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:app tests}"
style = [
    "ruff check {args:.}",
    "black --check --diff {args:.}",
]
fmt = [
    "black {args:.}",
    "ruff check --fix {args:.}",
    "style",
]
all = [
    "style",
    "typing",
]

[tool.hatch.envs.docs]
dependencies = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve --dev-addr localhost:8000"

# Tool configurations
[tool.black]
target-version = ["py310", "py311", "py312"]
line-length = 88
skip-string-normalization = true

[tool.ruff]
target-version = "py310"
line-length = 88
fix = true

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "FLY", # flynt
    "PERF", # Perflint
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B006",  # do not use mutable data structures for argument defaults
    "C901",  # too complex
    "SIM102", # sometimes it's better to nest
    "UP007", # X | Y union syntax requires Python 3.10+
    "B018",  # useless expression (common in test/demo code)
    "B904",  # raise exceptions with from
    "PERF203", # try-except in loop overhead
    "PERF401", # list comprehensions vs append
    "RUF005", # concatenation vs unpacking
    "ARG001", # unused function arguments
    "UP036", # version block outdated
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.bandit.assert_used]
skips = ["*/tests/*"]

[tool.ruff.lint.isort]
known-first-party = ["app"]

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
exclude = [
    "tests/",
    "scripts/",
    "setup_dev.py",
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "-ra",
]
testpaths = ["tests"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["app"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
