#!/usr/bin/env python3
"""
Creates GitHub issues for daily insight reports
"""

import os
from datetime import datetime
from pathlib import Path

import requests


def create_insight_issue():
    """Create a GitHub issue for the daily insight report"""

    # Get environment variables
    github_token = os.getenv("GITHUB_TOKEN")
    repo = os.getenv("GITHUB_REPOSITORY", "IgorGanapolsky/agent-web-scraper")

    if not github_token:
        print("❌ GITHUB_TOKEN not found")
        return

    # Find today's report file
    today = datetime.now().strftime("%Y-%m-%d")
    report_file = f"reports/insight_daily_{today}.md"

    if not Path(report_file).exists():
        print(f"❌ Report file {report_file} not found")
        return

    # Read first few lines for preview
    try:
        with open(report_file) as f:
            lines = f.readlines()
            preview = "".join(lines[:10])  # First 10 lines as preview
    except Exception as e:
        print(f"❌ Error reading report: {e}")
        return

    # Create issue content
    title = f"💡 AI Insight Summary - {datetime.now().strftime('%B %d, %Y')}"

    body = f"""**🤖 Daily AI Insight Report Available**

A new AI-powered analysis of our market data has been generated with key findings and opportunities.

**📊 Report Highlights:**
- Weekly pain point clustering and trend analysis
- Identification of underserved SaaS market niches
- High-converting lead magnet recommendations
- Strategic next steps for product development

**📄 Full Report:** [View insight_daily_{today}.md](./reports/insight_daily_{today}.md)

**🎯 Quick Preview:**
```
{preview.strip()}
```

---

*🤖 Auto-generated by Daily Insight Workflow | [View Automation](./.github/workflows/insight_report.yml)*

**Labels:** insight, automation, daily-report"""

    # API request to create issue
    url = f"https://api.github.com/repos/{repo}/issues"
    headers = {
        "Authorization": f"token {github_token}",
        "Accept": "application/vnd.github.v3+json",
    }

    data = {
        "title": title,
        "body": body,
        "labels": ["insight", "automation", "daily-report"],
    }

    try:
        response = requests.post(url, json=data, headers=headers)

        if response.status_code == 201:
            issue_data = response.json()
            print(f"✅ Created GitHub issue: {issue_data['html_url']}")
            print(f"📝 Issue #{issue_data['number']}: {title}")
        else:
            print(f"❌ Failed to create issue: {response.status_code}")
            print(f"Response: {response.text}")

    except Exception as e:
        print(f"❌ Error creating issue: {e}")


if __name__ == "__main__":
    create_insight_issue()
